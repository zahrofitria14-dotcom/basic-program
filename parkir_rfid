/*
 * RFID RC522 + Servo on ESP32
 * 
 * RFID RC522 wiring ke ESP32:
 * SDA  -> GPIO5
 * SCK  -> GPIO18
 * MOSI -> GPIO23
 * MISO -> GPIO19
 * RST  -> GPIO27
 * 3.3V -> 3.3V
 * GND  -> GND
 * 
 * Servo -> GPIO13 (bisa pilih GPIO lain yang support PWM)
 */

#include <SPI.h>
#include <MFRC522.h>
#include <ESP32Servo.h>   // Library khusus ESP32

// Pin definitions
#define SS_PIN 5
#define RST_PIN 27
#define SERVO_PIN 13

// Buat object RFID & Servo
MFRC522 mfrc522(SS_PIN, RST_PIN);
Servo myServo;

// ===== KONFIGURASI UID KARTU =====
#define AUTHORIZED_UID_SIZE 4  
byte authorizedUID[AUTHORIZED_UID_SIZE] = {0xDE, 0xAD, 0xBE, 0xEF}; 
// Ganti dengan UID kartumu!
// ================================

// Variabel timing
unsigned long lastReadTime = 0;
const unsigned long READ_INTERVAL = 2000;

void setup() {
  Serial.begin(115200);
  while (!Serial);

  SPI.begin();           
  mfrc522.PCD_Init();    
  mfrc522.PCD_DumpVersionToSerial(); 

  // Servo
  myServo.attach(SERVO_PIN);
  myServo.write(0); // posisi terkunci
  delay(1000);

  Serial.println("ESP32 RFID Reader with Servo Ready");
}

void loop() {
  unsigned long currentTime = millis();
  if (currentTime - lastReadTime < READ_INTERVAL) {
    return;
  }

  if (!mfrc522.PICC_IsNewCardPresent()) return;
  if (!mfrc522.PICC_ReadCardSerial()) return;

  lastReadTime = currentTime;

  Serial.print("UID tag :");
  String content = "";
  byte readCard[7];

  for (byte i = 0; i < mfrc522.uid.size; i++) {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
    content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
    content.concat(String(mfrc522.uid.uidByte[i], HEX));
    readCard[i] = mfrc522.uid.uidByte[i];
  }
  Serial.println();

  if (checkUID(readCard)) {
    Serial.println("Authorized card detected!");
    activateServo();
  } else {
    Serial.println("Unauthorized card!");
    denyAccess();
  }

  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
}

// Fungsi cek UID
bool checkUID(byte cardUID[]) {
  for (byte i = 0; i < AUTHORIZED_UID_SIZE; i++) {
    if (cardUID[i] != authorizedUID[i]) {
      return false;
    }
  }
  return true;
}

// Servo gerak jika kartu valid
void activateServo() {
  Serial.println("Access granted - Opening door...");
  myServo.write(90);
  delay(3000);
  myServo.write(0);
  Serial.println("Door closed again.");
  delay(500);
}

// Servo getar jika kartu invalid
void denyAccess() {
  Serial.println("ACCESS DENIED!");
  for (int i = 0; i < 3; i++) {
    myServo.write(20);
    delay(200);
    myServo.write(0);
    delay(200);
  }
}
